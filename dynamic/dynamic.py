
import enum
import json
import os
import pickle
import time
import sys
import numpy as np

'''
helper classes
'''
class timer():

    def start(self):
        self.start_time = time.time()

    def end(self):
        end_time = time.time()
        total_time = self.start_time - end_time
        self.hours = int(total_time / 3600)
        remaining_secs = total_time - self.hours * 3600
        self.minutes = int(remaining_secs / 60)
        self.seconds = remaining_secs - self.minutes * 60

    def show(self):
        print("Total Execution Time\n{}h : {}m : {}s".format(self.hours, self.minutes, int(self.seconds)))

class TYPE(enum.Enum):
    BENIGN = 0
    MALWARE = 1

api_info_dict = {'NtCreateSection': 'process', 'InternetGetConnectedStateExA': 'network', 'LoadStringA': 'ui',
                 'NtReadFile': 'file', 'DrawTextExA': 'ui', 'WriteConsoleW': 'misc', 'GetBestInterfaceEx': 'network',
                 'FindResourceExW': 'resource', 'RegQueryValueExA': 'registry', 'CopyFileW': 'file',
                 'DeleteFileW': 'file', 'DrawTextExW': 'ui', 'CreateServiceA': 'services', 'OpenServiceA': 'services',
                 'GetVolumeNameForVolumeMountPointW': 'file', 'GetAdaptersAddresses': 'network',
                 'WriteConsoleA': 'misc', 'CryptProtectMemory': 'crypto', 'WSAStartup': 'network',
                 'RegSetValueExW': 'registry', 'sendto': 'network', 'CertOpenSystemStoreA': 'certificate',
                 'NtDeleteValueKey': 'registry', 'SizeofResource': 'resource', 'InternetGetConnectedState': 'network',
                 'CryptExportKey': 'crypto', 'StartServiceW': 'services', 'EnumServicesStatusA': 'services',
                 'SearchPathW': 'file', 'NtWriteFile': 'file', 'CoGetClassObject': 'ole',
                 'CreateProcessInternalW': 'process', 'NtFreeVirtualMemory': 'process', 'UuidCreate': 'misc',
                 'NtAllocateVirtualMemory': 'process', 'SetFileTime': 'file', 'CreateRemoteThreadEx': 'process',
                 'InternetQueryOptionA': 'network', 'GetKeyboardState': 'system', 'GetForegroundWindow': 'ui',
                 'CertCreateCertificateContext': 'certificate', 'DnsQuery_W': 'network', 'HttpSendRequestA': 'network',
                 'RegEnumKeyW': 'registry', 'RegEnumKeyExW': 'registry', 'NtCreateFile': 'file',
                 'RegDeleteValueA': 'registry', 'FindWindowExA': 'ui', 'Process32FirstW': 'process',
                 'GetTimeZoneInformation': 'misc', 'RtlCreateUserThread': 'process', 'SetErrorMode': 'system',
                 'CreateJobObjectW': 'process', 'RtlDecompressBuffer': 'system', 'CoInitializeSecurity': 'ole',
                 'NtSetValueKey': 'registry', 'SendNotifyMessageW': 'system', 'InternetCrackUrlA': 'network',
                 'CryptDecodeObjectEx': 'crypto', 'RegisterHotKey': 'misc', 'NtDeleteKey': 'registry',
                 '__exception__': '__notification__', 'InternetOpenA': 'network', 'EnumServicesStatusW': 'services',
                 'NtEnumerateValueKey': 'registry', 'GetCursorPos': 'misc', 'IWbemServices_ExecQuery': 'misc',
                 'NtMapViewOfSection': 'process', 'GetFileSizeEx': 'file', 'send': 'network', 'setsockopt': 'network',
                 'GetSystemTimeAsFileTime': 'synchronisation', 'GetTempPathW': 'file', 'CryptUnprotectMemory': 'crypto',
                 'NtOpenSection': 'process', 'GetSystemWindowsDirectoryA': 'file', 'recv': 'network',
                 'SetFileAttributesW': 'file', 'NtUnmapViewOfSection': 'process', 'NtSuspendThread': 'process',
                 'GetSystemDirectoryA': 'file', 'SetInformationJobObject': 'process', 'NtSetContextThread': 'process',
                 'ShellExecuteExW': 'process', 'NtClose': 'system', 'NtWriteVirtualMemory': 'process',
                 'NtQueryDirectoryFile': 'file', 'CryptHashData': 'crypto', 'InternetSetOptionA': 'network',
                 'FindWindowA': 'ui', 'FindFirstFileExW': 'file', 'CopyFileExW': 'file', 'IsDebuggerPresent': 'system',
                 'AssignProcessToJobObject': 'process', 'LoadStringW': 'ui', 'WSARecv': 'network',
                 'LookupPrivilegeValueW': 'system', 'NtQueryMultipleValueKey': 'registry', 'RegDeleteKeyA': 'registry',
                 'GetDiskFreeSpaceW': 'misc', 'RegCreateKeyExA': 'registry', 'NtOpenMutant': 'synchronisation',
                 'HttpOpenRequestW': 'network', 'NtQueryAttributesFile': 'file', 'MessageBoxTimeoutW': 'ui',
                 'GetSystemInfo': 'system', 'NtTerminateProcess': 'process', 'gethostbyname': 'network',
                 'GetUserNameW': 'misc', 'CoCreateInstance': 'ole', 'GetComputerNameW': 'misc',
                 'LookupAccountSidW': 'misc', 'NtResumeThread': 'process', 'SetFilePointerEx': 'file',
                 'HttpOpenRequestA': 'network', 'select': 'network', 'RegEnumValueW': 'registry', 'accept': 'network',
                 'GetSystemMetrics': 'misc', 'InternetOpenUrlA': 'network', 'WSASocketW': 'network',
                 'LoadResource': 'resource', 'CryptAcquireContextW': 'crypto', 'closesocket': 'network',
                 'IWbemServices_ExecMethod': 'misc', 'RegCreateKeyExW': 'registry', 'FindWindowW': 'ui',
                 'WriteProcessMemory': 'process', 'CreateDirectoryExW': 'file', 'HttpQueryInfoA': 'network',
                 'OpenSCManagerW': 'services', 'GetUserNameA': 'misc', 'NtGetContextThread': 'process',
                 'FindWindowExW': 'ui', 'NtQueueApcThread': 'process', 'GetComputerNameA': 'misc',
                 'RegQueryInfoKeyA': 'registry', 'GetUserNameExA': 'misc', 'GetNativeSystemInfo': 'system',
                 'LdrLoadDll': 'system', 'NtReadVirtualMemory': 'process', 'RegDeleteValueW': 'registry',
                 'RegEnumValueA': 'registry', 'GetAddrInfoW': 'network', 'RtlAddVectoredExceptionHandler': 'exception',
                 'OpenSCManagerA': 'services', 'NetShareEnum': 'netapi', 'listen': 'network',
                 'RegSetValueExA': 'registry', 'FindResourceExA': 'resource', 'CoCreateInstanceEx': 'ole',
                 'socket': 'network', 'InternetConnectW': 'network', 'NtQuerySystemInformation': 'system',
                 'GetFileInformationByHandleEx': 'file', 'CertControlStore': 'certificate',
                 'ObtainUserAgentString': 'network', 'SetFileInformationByHandle': 'file', 'SetFilePointer': 'file',
                 'CoUninitialize': 'ole', 'CryptAcquireContextA': 'crypto', 'GetFileVersionInfoSizeExW': 'misc',
                 'RegCloseKey': 'registry', 'WSASocketA': 'network', 'TaskDialog': 'misc',
                 'GetDiskFreeSpaceExW': 'misc', 'NetUserGetInfo': 'netapi', 'NtQueryInformationFile': 'file',
                 'GetFileVersionInfoW': 'misc', 'FindFirstFileExA': 'file', 'WSASendTo': 'network',
                 'InternetCloseHandle': 'network', 'GetVolumePathNameW': 'file', 'GetFileVersionInfoSizeW': 'misc',
                 'recvfrom': 'network', 'GetFileInformationByHandle': 'file', 'Module32FirstW': 'process',
                 'NtQueryValueKey': 'registry', 'OpenServiceW': 'services', 'LdrGetDllHandle': 'system',
                 'SetWindowsHookExA': 'system', 'NtDelayExecution': 'synchronisation', 'NtCreateThreadEx': 'process',
                 'GetFileSize': 'file', 'EnumWindows': 'misc', 'NtTerminateThread': 'process',
                 'RtlAddVectoredContinueHandler': 'exception', 'FindResourceW': 'resource', 'bind': 'network',
                 'GetFileVersionInfoExW': 'misc', 'GetKeyState': 'system', 'GlobalMemoryStatus': 'system',
                 'LdrGetProcedureAddress': 'system', 'StartServiceA': 'services', 'SendNotifyMessageA': 'system',
                 'InternetSetStatusCallback': 'network', 'NtOpenKeyEx': 'registry', 'GetShortPathNameW': 'file',
                 'Thread32Next': 'process', 'WSARecvFrom': 'network', 'CreateToolhelp32Snapshot': 'process',
                 'RtlRemoveVectoredExceptionHandler': 'exception', 'NtOpenFile': 'file',
                 'GetVolumePathNamesForVolumeNameW': 'file', 'OutputDebugStringA': 'system',
                 'RegOpenKeyExA': 'registry', 'DeviceIoControl': 'file', 'MoveFileWithProgressW': 'file',
                 'NtEnumerateKey': 'registry', 'shutdown': 'network', 'NtOpenDirectoryObject': 'file',
                 'ioctlsocket': 'network', 'UnhookWindowsHookEx': 'system', 'InternetOpenUrlW': 'network',
                 'getaddrinfo': 'network', 'Module32NextW': 'process', 'HttpSendRequestW': 'network',
                 'NtSetInformationFile': 'file', 'GetInterfaceInfo': 'network', 'CreateServiceW': 'services',
                 'GetFileType': 'file', 'CoInitializeEx': 'ole', 'NtDeviceIoControlFile': 'file',
                 'GetSystemDirectoryW': 'file', 'RegQueryValueExW': 'registry', 'RemoveDirectoryA': 'file',
                 'GetFileAttributesExW': 'file', 'RegQueryInfoKeyW': 'registry', 'getsockname': 'network',
                 'NtOpenKey': 'registry', 'GlobalMemoryStatusEx': 'system', 'WNetGetProviderNameW': 'network',
                 'CreateRemoteThread': 'process', 'RemoveDirectoryW': 'file', 'GetAdaptersInfo': 'network',
                 'NtQueryKey': 'registry', 'InternetConnectA': 'network', 'ControlService': 'services',
                 'RegOpenKeyExW': 'registry', 'GetAsyncKeyState': 'system', 'PRF': 'crypto',
                 'FindResourceA': 'resource', 'CreateDirectoryW': 'file', 'NtProtectVirtualMemory': 'process',
                 'SHGetFolderPathW': 'misc', 'GetSystemWindowsDirectoryW': 'file', 'GetUserNameExW': 'misc',
                 'CryptCreateHash': 'crypto', 'ReadCabinetState': 'misc', 'CryptGenKey': 'crypto',
                 'DeleteUrlCacheEntryW': 'network', 'RegEnumKeyExA': 'registry', 'ReadProcessMemory': 'process',
                 'CryptProtectData': 'crypto', 'DeleteService': 'services', 'CertOpenStore': 'certificate',
                 'NtOpenThread': 'process', 'NtCreateKey': 'registry', 'CopyFileA': 'file',
                 'NtDuplicateObject': 'system', 'NtQueryFullAttributesFile': 'file', 'Thread32First': 'process',
                 'NetGetJoinInformation': 'netapi', 'InternetOpenW': 'network', 'timeGetTime': 'synchronisation',
                 'ExitWindowsEx': 'system', 'CreateActCtxW': 'misc', 'OleInitialize': 'ole',
                 'InternetCrackUrlW': 'network', 'RegDeleteKeyW': 'registry', 'connect': 'network',
                 'SetStdHandle': 'misc', 'LdrUnloadDll': 'system', 'MessageBoxTimeoutA': 'ui',
                 'SetUnhandledExceptionFilter': 'exception', 'system': 'process', 'NtLoadDriver': 'system',
                 'Process32NextW': 'process', 'SetWindowsHookExW': 'system', 'SetEndOfFile': 'file',
                 'NtCreateMutant': 'synchronisation', 'NtOpenProcess': 'process', 'SHGetSpecialFolderLocation': 'misc',
                 'CreateThread': 'process', 'GetFileAttributesW': 'file', 'CryptDecrypt': 'crypto'}

'''
reduced feature set after feature selection - total 74
'''
api_categories =  ['crypto', 'ole', 'ui', 'process', 'file', '__notification__', 'exception', 'registry', 'system', 'synchronisation', 'resource']
api_stats_list =  ['__exception__', 'SearchPathW', 'DrawTextExW', 'FindResourceExW', 'NtQueryDirectoryFile', 'GetSystemMetrics', 'LoadStringW', 'GetFileSizeEx', 'FindResourceW', 'LdrUnloadDll', 'NtQueryAttributesFile', 'CoUninitialize', 'GetFileSize', 'GetFileInformationByHandleEx', 'NtOpenKeyEx', 'NtQueryValueKey', 'GetFileType', 'LdrGetDllHandle', 'NtOpenKey', 'NtAllocateVirtualMemory', 'RegOpenKeyExW', 'RegCloseKey', 'RegQueryValueExW', 'GetSystemTimeAsFileTime', 'NtClose', 'NtMapViewOfSection', 'GetSystemDirectoryW', 'NtWriteFile', 'NtCreateFile', 'GetFileVersionInfoW', 'NtOpenMutant', 'LdrGetProcedureAddress', 'GetFileAttributesW', 'LoadResource', 'SetFilePointer', 'GetSystemWindowsDirectoryW', 'SizeofResource', 'GetForegroundWindow', 'CoInitializeEx', 'WriteConsoleW', 'GetCursorPos', 'NtReadFile', 'NtCreateSection', 'LdrLoadDll']
network =  ['http', 'tcp', 'icmp', 'dns', 'hosts', 'udp', 'domains']
summary =  ['file_deleted', 'file_opened', 'regkey_written', 'guid', 'directory_enumerated', 'regkey_opened', 'file_read', 'dll_loaded', 'file_exists', 'regkey_read', 'directory_created']
feature_names = ['duration'] + network + api_categories + summary + api_stats_list


'''
@function
    usage helper function
'''
def display_help(category=None):
    string = "Incorrect Usage: "
    if category == None:
        string = "Usage:\tpython dynamic.py [OPTION]... [FILE]...\nTag given data-set with labels M/B (Malware/Benign)\n\n" \
                 "--help  display this help info\n\nOptions:\n\t" \
                 "data dump\n\t\t-d  <path to directory containing train data>  <path to dump the training data as .csv file>\n\t" \
                 "validate\n\t\t-v  <path to .dat file>\n\t" \
                 "train\n\t\t-t  <path to .dat file>  <path to dump model as .model file\n\t" \
                 "predict\n\t\t-p  <path to directory containing test data>  <path to .model file>\n\n" \
                 "Example:\n\tpython dynamic.py -p /home/data/test/dynamic /home/model/dynamic.model\n\n" \
                 "Note:\n\tdata dump - creates a .dat file in same directory as .csv file with same name\n\tpredict   - creates dynamic.csv containing all samples with their respective tags (M/B)\n\n" \
                 "Warning: Please use only one option at a time to avoid any unexpected behavior.\n"
    elif category == "data":
        string += "Missing data path(s)\nPlease use the below format to execute the script\n\nUsage: python dynamic.py [OPTION]... [FILE]...\n\n" \
                  "data dump: (also creates a .dat file in same directory as .csv file with same name)\n\t\t-d  <path to directory containing train data>  <path to dump the training data as csv>\n" \
                  "Example:\n\tpython dynamic.py -d /home/data/train/dynamic /home/data/train/dynamic.csv\n"
    elif category == "validate":
        string += "Missing .dat file\nPlease use the below format to execute the script\n\nUsage: python dynamic.py [OPTION]... [FILE]...\n\n" \
                  "validate: \n\t\t-v  <path to .dat file>\n" \
                  "Example:\n\tpython dynamic.py -v /home/data/train/dynamic.dat\n"
    elif category == "train":
        string += "Missing data path(s)\nPlease use the below format to execute the script\n\nUsage: python dynamic.py [OPTION]... [FILE]...\n\n" \
                  "train:\n\t\t-t  <path to .dat file>  <path to dump model as .model file>\n" \
                  "Example:\n\tpython dynamic.py -t /home/data/train/dynamic.dat /home/data/train/dynamic.model\n"
    elif category == "predict":
        string += "Missing data path(s)\nPlease use the below format to execute the script\n\nUsage: python dynamic.py [OPTION]... [FILE]...\n\n" \
                 "predict:\n\t\t-p  <path to directory containing test data>  <path to .model file>\n\n" \
                 "Example:\n\tpython dynamic.py -p /home/data/test/dynamic /home/model/dynamic.model\n"
    print(string)

'''
main functions
'''

'''
@misc
    list of all features to be extracted and structure of json file

    ================( value )================
    info dict
        duration : value => value
    ================( count )================
    dropped list => length
    network (network) (known #) dict
        udp list => length
        http list
        ...
        icmp list
    behavior_dict (apis, apis categories, api summaries)
        processes list => length
        apistats (unknown #) dict
            x dict
                dict(api : count) => api_stats += count
            y dict
                dict(api : count)
            ...
            z dict
                dict(api : count)
        summary dict
            regkey_read list => length
            dll_loaded list
            ...
            file_exists list
@input
    file_path   - absolute path of sample file to be analyzed
@output
    a dictionary of features with corresponding values
@function
    analyzes the given sample json file and extracts useful features from it
'''
def get_features(file_path):
    feature_dict = dict.fromkeys(feature_names, 0)
    with open(file_path, 'rb') as fh:
        try:
            data = json.load(fh)
            try:
                feature_dict['duration'] = data['info']['duration']
            except:
                pass
            for feat in network:
                try:
                    feature_dict[feat] = len(data['network'][feat])
                except:
                    pass
            try:
                behave_dict = data['behavior']
                apis = set()
                for key in behave_dict['apistats'].keys():
                    for api in behave_dict['apistats'][key].keys():
                        try:
                            apis.add(api)
                            count = behave_dict['apistats'][key][api]
                            if feature_dict.get(api, -1) != -1:
                                feature_dict[api] += count
                        except:
                            pass
                    for api in apis:
                        category = api_info_dict[api]
                        if feature_dict.get(category, -1) != -1:
                            feature_dict[category] += 1
                for feat in summary:
                    try:
                        feature_dict[feat] = len(behave_dict['summary'][feat])
                    except:
                        pass
            except:
                pass
        except:
            print("Error parsing: ", file_path, "\nPlease check if the file is in valid json format")
            exit(1)
    # cutting down on any spurious features read, preserving only selected features
    feature_vec = {}
    for feature in feature_names:
        feature_vec[feature] = feature_dict[feature]
    return feature_vec

def main():

    arg_list = sys.argv

    try:
        predict_model = arg_list.index('-p')
    except ValueError:
        predict_model = 0
    try:
        help = arg_list.index('--help')
    except ValueError:
        help = 0

    if help or not (predict_model):
        display_help()

    if predict_model:
        try:
            path_to_data_dir = arg_list[predict_model + 1]
            path_to_model = arg_list[predict_model + 2]
        except:
            display_help("predict")
            exit(1)
        with open(path_to_model, 'rb') as f:
            model = pickle.load(f)
        print("Processing Files...")
        file_count = sum(len(files) for _, _, files in os.walk(path_to_data_dir))
        steps = int(file_count / 10)
        count = 0
        percentage = 10
        with open("dynamic.csv", 'w') as fh:
            fh.write("File_Hash,Predicted Label")
            file_name_list = []
            feature_vec_list = []
            for file_name in os.listdir(path_to_data_dir):
                count += 1
                if count % steps == 0 and percentage < 100:
                    print("...%d%%" % (percentage), end='', flush=True)
                    percentage += 10
                # .../Malware/Trojan/0aeb1...
                abs_file_path = os.path.join(path_to_data_dir, file_name)
                feature_dict = get_features(abs_file_path)
                feature_vec = []
                for feature in feature_names:
                    feature_vec.append(feature_dict[feature])
                feature_vec_list.append(feature_vec)
                file_name_list.append(file_name.split('.')[0])
            print("...100%\nCompleted\n")
            print("Dumping results to dynamic.csv...")
            test_data = np.array(feature_vec_list, dtype=np.int)
            y = model.predict(test_data)
            label_list = list(map(lambda i: 'M' if i == 1 else 'B', y))
            for item in zip(file_name_list, label_list):
                fh.write("\n" + item[0] + "," + item[1])
            print("Done\n")


if __name__ == '__main__':
    main_timer = timer()
    main_timer.start()
    main()
    main_timer.end()
    main_timer.show()

